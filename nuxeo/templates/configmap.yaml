{{- range splitList "," (include "nuxeo.nodeTypes" .) }}
{{- $nxNodeType := . -}}
{{- with $ }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nuxeo.fullname" . }}-conf-{{ $nxNodeType }}
  labels:
    app: {{ template "nuxeo.fullname" . }}-{{ $nxNodeType }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    role: config
data:
  nuxeo.conf: |-
    # Additional nuxeo.conf parameters
    nuxeo.stream.work.log.codec=avro
    nuxeo.stream.audit.log.codec=avro
    nuxeo.stream.pubsub.log.codec=avro
{{- if or .Values.mongodb.deploy .Values.mongodb.enabled }}
    nuxeo.templates=default,mongodb
    nuxeo.mongodb.server=mongodb://{{ .Values.mongodb.credentials }}@{{ .Values.mongodb.server }}:{{ .Values.mongodb.port }}
    nuxeo.mongodb.dbname={{ template "nuxeo.name" . }}
{{- end }}
{{- if or .Values.postgresql.deploy .Values.postgresql.enabled }}
    nuxeo.templates=default,postgresql
    nuxeo.db.name={{ .Values.postgresql.dbname }}
    nuxeo.db.user={{ .Values.postgresql.username }}
    nuxeo.db.password={{ .Values.postgresql.password }}
    nuxeo.db.host={{ .Release.Name }}-postgresql
    nuxeo.db.port=5432
{{- end }}
{{- if or .Values.elasticsearch.deploy .Values.elasticsearch.enabled }}
    elasticsearch.client=RestClient
    elasticsearch.clusterName={{ .Values.elasticsearch.clusterName }}
    elasticsearch.addressList={{ .Values.elasticsearch.protocol }}://{{ .Values.elasticsearch.server }}:{{ .Values.elasticsearch.port }}
    elasticsearch.indexName={{ template "nuxeo.name" . }}
    elasticsearch.indexNumberOfReplicas={{ .Values.elasticsearch.indexNumberOfReplicas }}
    elasticsearch.restClient.socketTimeoutMs={{ .Values.elasticsearch.restClient.socketTimeoutMs }}
    elasticsearch.restClient.connectionTimeoutMs={{ .Values.elasticsearch.restClient.connectionTimeoutMs }}
{{- end }}
{{- if or .Values.kafka.deploy .Values.kafka.enabled}}
    kafka.enabled=true
    kafka.bootstrap.servers={{ .Values.kafka.server }}:{{ .Values.kafka.port }}
    nuxeo.stream.work.enabled=true
    nuxeo.pubsub.provider=stream
    kafka.topicPrefix={{ template "nuxeo.name" . }}-
{{- end }}
{{- if or .Values.redis.deploy .Values.redis.enabled }}
{{- if or .Values.mongodb.deploy .Values.mongodb.enabled }}
    nuxeo.templates=default,mongodb,redis
{{- else if or  .Values.postgresql.deploy  .Values.postgresql.enabled }}
    nuxeo.templates=default,postgresql,redis
{{- else }}
    nuxeo.templates=default,redis
{{- end }}
    nuxeo.redis.host={{ .Release.Name }}-redis-master
    nuxeo.work.queuing=redis
    nuxeo.redis.enabled=true
{{- end }}
{{- if .Values.customParams }}
{{ .Values.customParams | indent 4 }}
{{- end }}
{{- if .Values.googleCloudStorage.enabled }}
    nuxeo.core.binarymanager=org.nuxeo.ecm.core.storage.gcp.GoogleStorageBinaryManager
    nuxeo.gcp.storage.bucket= {{ .Values.googleCloudStorage.bucketname }}
    nuxeo.gcp.storage.bucket_prefix={{ template "nuxeo.name" . }}
    nuxeo.gcp.project={{ .Values.googleCloudStorage.project }}
    nuxeo.gcp.credentials=/opt/nuxeo/gcp/gcp-credentials.json
    metrics.stackdriver.enabled=true
    metrics.stackdriver.gcpProjectId={{ .Values.googleCloudStorage.project }}
{{- end }}
    repository.clustering.enabled=true
    repository.clustering.id={{ uuidv4 }} (
{{- if eq $nxNodeType "api" }}
    // disable workers and stream processing
    nuxeo.stream.processing.enabled=false
    nuxeo.work.processing.enabled=false
{{- else }}
    // Enable workers and stream processing
    nuxeo.stream.processing.enabled=true
    nuxeo.work.processing.enabled=true
{{- end }}
{{- end }}
{{- end }}